本周还是一样刷题，打了蓝帽子顺便学了重合指数和拟重合指数来唯密文破解维吉尼亚，后来实现了des(好像有点bug）,看了ECC基本知识，学习了离散对数集中特殊情况的求解，虽然还不太懂哈。
直接从博客复制来的，可以看我博客www.zbc53.top
> 离散对数$(Discrete\,\,logarithm, DL)$是一种基于同余运算和原根的一种对数运算,在任何群$G$中可为所有整数$k$定义一个幂数为$b^k$，而离散对数$\log_b{a}$是指使得$a=b^k$的整数$k$;离散对数在一些特殊情况下可以快速计算。然而，通常没有具非常效率的方法来计算它们。公钥密码学中几个重要算法的基础，是假设寻找离散对数的问题解，在仔细选择过的群中，并不存在有效率的求解算法。

前面不管是一般的离散对数，还是椭圆曲线上的离散对数都是一个难题，正如引言中说的“离散对数在一些特殊情况下可以快速计算”,所以这儿学习一下这些特殊情况的快速计算，并学习相关数学知识。
**几个基本定义**：

 - 在群$G$中，$g$为$G$的生成元，也就是说群中元素都可以写成$y=g^k$,那么则称$k$是$y$在群$G$的对数
 - 设$m\ge 1,(a,m)=1$,使得$a^d\equiv 1\mod{m}$成立最小的正整数$d$称为$a$对模$m$的阶或指数,记为${\delta}_m(a)$
 - ${\delta}_m(a)=\Phi(m)$,称$a$为模$m$的原根，简称$m$的原根。
**几个性质**：
 - 满足$a^d\equiv 1\mod{m}$的最小整数$d$,$d|\Phi(m)$
 - 模$m$剩余系存在原根的充要条件为$m=2,4,p^{\alpha},2p^{\alpha}$,其中$p$为奇素数，$\alpha$为正整数

**离散对数问题**：已知$p,g,h$,求$x$满足：$$g^x\equiv h\mod{p}$$

 - 暴力破解：
简单粗暴，直接穷举$x$，得到$g^x\equiv h\mod{p}$的值

 - $Baby-step giant-step$
大步小步$(bsgs)$算法，又被称为北上广深$h$，采用的是中间相遇的思想，也是以空间换时间的一个典型的体现。
假设已知$x$在一个区间范围内，区间长度为$n$,令$D=\sqrt n$,那么令$x=iD+j$
显然$g^x=g^{iD+j}=h\mod{p}$ $$\Rightarrow h{g^{-D}}^i\equiv g^j\mod{p}$$然后穷举$i$或$j$计算一边的值放入一个集合$S$，再次穷举另一边，如得到的值在$S$中，则对应的$i,j$求到$x=iD+j$
显然每次$i$的增加是大步，$j$的增加是小步。
    from gmpy2 import *

    def bsgs(g, h, p, bound):
        m = iroot(bound,2)[0]+1
        S = {pow(g, j, p): j for j in range(m)}   
        gs = pow(g, -m, p)
        for i in range(m):
            if h in S:
                return i * m + S[h]
            h = h * gs % p
        return None
    g=
    h=
    p=
    bound=
    print(bsgs(g,h,p,bound))
**Pollard's ρ algorithm**

> 一个随机性的概率算法，可以加速大整数的分解，用于攻击$RSA$密码体系，后来也用于求解离散对数问题，同时扩展到了椭圆曲线上，这样该算法就成功地威胁到了整个公钥密码体制

首先了解一下用于分解合数的情况：它只占用很少的空间，并且运行时间与该合数最小质因数的平方根成正比。

核心思想：假设分解$n=pq$,$p$不是非平凡因子，选择一个模$n$的多项式，一般用$g(x)=x^2+1\mod{n}$,用于产生伪随机数列，选择一个初始值，比如$2$，计算$x_1=g(2),x_2=g(g(2)),x_3=g(g(g(2))),...$，这个数列是有限的，最终会循环
    def series(n):
        x=2
        for _ in range(20):
            x=(x*x+1)%n
            print(x,end=" ")
        print("\n")       
    series(33)
    #5 26 17 26 17 26 17 26 17 26 17 26 17 26 17 26 17 26 17 26
    series(99)
    #5 26 83 59 17 92 50 26 83 59 17 92 50 26 83 59 17 92 50 26
 
可以发现在一个值后，序列进行循环，且模数$n$越大，循环周期越长。
实现过程：意思是说设立两个节点$i,j$，$i$每次移动一次，$j$每次移动两次，每移动一次计算$gcd(|x_i-x_j|,n)$,如果不为$1$或$n$则分解成功，找到了最小的质因数,同时指出：$gcd(|x_i-x_j|,n)\ne 1$的时刻一定会来临，也可能是$n$，那么需要重新设定初始值再计算，很神奇哈，没太懂,搞了张形象的动图解释供参考：
![][1]
按着它的意思可以写出代码：
    from gmpy2 import gcd
    from Crypto.Util.number import isPrime

    def series(x,n):
        return (x*x+1)%n
     
    def Pollard_rho(n):
        x1=2
        x2=2
        d=1
        while d==1:
            x1=series(x1,n)
            x2=series(series(x2,n),n)
            d=gcd(abs(x1-x2),n)
        return d

    def Factor(n):
        ans=[]
        while True:
            temp=Pollard_rho(n)
            ans.append(temp)
            n//=temp
            if n==1: return ans
            if isPrime(n):
                ans.append(n)
                return ans
        
    n=12345678754345678765456789876587654567899876   
    print(Factor(n))
    #[4, 3109, 3553454208763, 279372423577347576184497407]

可见该方法，在分解具有小质因子的合数很快。
变体：在之前是每移动一次就检查一次，后来$Richard\,\,Brent提出$,$gcd(a,n)\gt 1$,那么显然$gcd(ab,n)\gt 1$,定义$z=\prod_{i,j} {(x_i-x_j)}$，所以每移动$100$次检查一次$gcd(z,n)$,但是可能会因为引入相同的因子造成算法失败，比如$n$是一个完全平方数。

至于应用在离散对数更有点不懂了，大致说一下思路，以后再补吧。
基于生日悖论，基本思想就是伪随机地生成${\alpha}^i,{\beta}^j$形成群元素，并记录对应的$i,j$,不断重复，直到出现冲突，即得到$${\alpha}^{i_1}{\beta}^{j_1}={\alpha}^{i_2}{\beta}^{j_2}$$将$\beta={\alpha}^x$进行代换并比较两边指数，则可得到关系$i_1+xj_1=i_2+xj_2\mod{|G|}$指在有$|G|$个元素的循环群中，那么离散对数就可以表示成：$$x\equiv \frac{i_2-i_1}{j_1-j_2}\mod{|G|}$$至于找到冲突的确切方法，不太明白，一篇文章可以参考一下：[https://xz.aliyun.com/t/2780][2]
**Pollard’s kangaroo algorithm**:
[https://en.wikipedia.org/wiki/Pollard%27s_kangaroo_algorithm][3]
[https://www.cnblogs.com/zhuowangy2k/p/12245622.html][4]
先放这儿吧，难搞。
**Pohlig-Hellman algorithm**：
是一种求解光滑阶循环群上的离散对数的方法，也就是说$N=p-1$是很多小因子的乘积，通常与前面提到的方法结合使用。$$N=p-1={q_1}^{e_1}{q_2}^{e_2}...{q_t}^{e_t},q_i\,\,is\,\,samll$$ 所以需要用到质因数分解，恰好前面提到的$Pollard's\,\,ρ \,\,algorithm$用于分解此类合数就很快。然后需要中国剩余定理：设$m_1,m_2,...,m_k$是两两互素的正整数，$M=\prod\limits_{i=1}^{k} m_i$,则同余方程组$$\left \{ \begin{array}{c}x\equiv a_1\mod{m_1}\\x\equiv a_2\mod{m_2}\\\vdots\\x\equiv a_k\mod{m_k}\\\end{array}\right.$$ 对模$M$有唯一解：$x\equiv (\frac{M}{m_1}e_1a_1+\frac{M}{m_2}e_2a_2+...+\frac{M}{m_k}{e_k}{a_k})\mod{M}$
其中$e_i$满足$\frac{M}{m_i}{e_1}\equiv 1\mod{m_i}$

> $CRT$更是一种解决问题的思想，把一个大的问题分解为若干个小的问题分别求解，$CRT$使得若干个子问题的解可以再组合成原问题的解(同余方程组)。这种算法应用到解决离散对数问题显得非常巧妙。这就是$Pohlig-Hellman$离散对数算法。
    from functools import reduce
    from gmpy2 import invert
    def CRT(a,m):
        Num=len(m)
        M=reduce(lambda x,y: x*y, m)
        e=[invert(M//m[i],m[i]) for i in range(Num)]
        x=0
        for i in range(Num):
            x+=a[i]*(M//m[i])*e[i]
        return x%M
    a=[2,3,2]
    m=[3,5,7]
    x=CRT(a,m)
    for i in range(len(m)):
        print(a[i]%m[i]==x%m[i])
    #True
    #True
    #True
然后说明一下该算法的大致实现步骤：

 - 将$N=p-1$分解，得到列表$qe=[{q_1}^{e_1},{q_2}^{e_2},...,{q_t}^{e_t}]$

 - 用已知的${q_i}^{e_i}$计算每一项$g^{{(p-1)}/{q_i}^{e_i}}$,$h^{{(p-1)}/{q_i}^{e_i}}$

 - 对于每一组$g^{{(p-1)}/{q_i}^{e_i}}$,$h^{{(p-1)}/{q_i}^{e_i}}$，计算出${(g^{{(p-1)}/{q_i}^{e_i}})}^x=h^{{(p-1)}/{q_i}^{e_i}}$

 - 将以上得到的$x$构成同余方程组$x\equiv x[i]\mod{qe[i]}$,利用中国剩余定理合并求解。
搞懂了其实也挺好写，主要是分解质因数和求$x$这两步，求$x$这步需结合之前的其它求离散对数的方法，最后中国剩余定理组合就完了。
搞了半天其实很多还是不懂，主要是太菜了，所以出动$sagemath$是个不错的选择。
常规的$sagemath$函数：参数说明：求解以**base**为底，**a**的对数,**ord**为**base**的阶，可以省略； **operation**是**\***或**+**,不写默认**\***,**bound**是一个区间，确保所求值在区间内。

 - 通用的求离散对数：discrete_log$($a,base,ord,operation$)$

 - 求离散对数的Pollard-Rho算法：discrete_log_rho$($a,base,ord,operation$)$

 - 求离散对数的Pollard-kangaroo算法：discrete_log_lambda$($a,base,bounds,operation$)$

 - 小步大步法：bsgs$($base,a,bounds,operation$)$

  [1]: https://upload.wikimedia.org/wikipedia/commons/2/2c/Rho-example-animated.gif
  [2]: https://xz.aliyun.com/t/2780
  [3]: https://en.wikipedia.org/wiki/Pollard%27s_kangaroo_algorithm
  [4]: https://www.cnblogs.com/zhuowangy2k/p/12245622.html
> 椭圆曲线密码学$($英语：$Elliptic\,\,Curve\,\,Cryptography$，缩写：$ECC)$是一种基于椭圆曲线数学的公开密钥加密算法。与传统的基于大质数因子分解困难性的加密方法不同，$ECC$ 依赖于解决椭圆曲线离散对数问题的困难性。它的优势主要在于相对于其它方法，它可以在使用较短密钥长度的同时保持相同的密码强度。目前椭圆曲线主要采用的有限域有以素数为模的整数域 $GF(p)$和特征为2的伽罗华域$ GF(2m)$。

**椭圆曲线**：椭圆曲线并非椭圆，因为它的曲线方程与计算椭圆周长的方程类似而得名，一般地是以下形式的三次方程：$$y^2+a_1xy+a_3y=x^3+a_2x^2+a_4x+a_6$$ $a,b,c,d$是满足某些简单条件的实数,密码中普遍采用的是有限域上的椭圆曲线其中最常见方程为：$$y^2=x^3+ax+b (a,b\in GF(p),4a^3+27b^3\ne 0)$$

> 椭圆曲线要求非奇异，从几何上来说：意味着曲线没有尖点，自相交或者孤立点;代数上：只需要判别式$-16(4a^3+27b^2)\ne 0$。

**椭圆曲线上的群操作(有限域)**：

 - 无穷远点：定义无穷远点为$O$,$F_p$上的椭圆曲线，$O$是零元。
 - 点加法：
![2021-05-03T08:01:45.png][1]
几何上来看，相异点$P,Q$相加就是两点$P,Q$的连线与椭圆曲线的交点关于$x$轴对称的另一个点，从椭圆曲线表达式很容易看出曲线是关于$x$轴对称的，所有一定存在这个点。相同点类似，椭圆曲线在相同点$P,Q$切线与椭圆曲线交点关于$x$轴对称的另一个点。我们可以得到表达式：在$y^2=x^3+ax+b (a,b\in GF(p),4a^3+27b^3\ne 0)$这条椭圆曲线上
 有点$P(x_1,y_1)$,$Q(x_2,y_2)$设$P+Q=W(x_3,y_3)$，
那么有$x_3=s^2-x_1-x_2\mod{p},y_3=s(x_1-x_3)-y_1\mod{p}$
$$
其中s=\left \{ 
\begin{array}{c}
\frac{y_2-y_1}{x_2-x_1}\mod{p},P\ne Q\\
\\
\frac{3{x_1}^2+a}{2y_1}\mod{p},P=Q\\
\end{array}
\right.
$$
特别地：一个单位元$O(x,y)$满足，$P+O=P$，但是不存在这样的$(x,y)$的，所以定义一个无穷远点$O$,$P+O=P$，根据群的定义可将群元素$P$的逆元$-P$定义为:$P+(-P)=O$,实际上逆元就是该点关于$x$轴对称的点，即对于点$P(x,y)$，其逆元$-P=(x,-y)$。
另外定义数乘:一个点$P(x,y)$,整数$k$,$Q=kp$，其实可以直接看成$k$个相同点$P$累加。
    from gmpy2 import *

    def plus(P,Q,a,p):
        if P!=Q:
            s=(P[1]-Q[1])*invert(P[0]-Q[0],p) %p
        else:
            s=(3*P[0]*P[0]+a)*invert(2*P[1],p) %p
            
        x3=(s*s-P[0]-Q[0] )%p
        y3=(s*(P[0]-x3)-P[1])%p
        
        return (x3,y3)
    a=2
    p=17
    P=Q=(5,1)
    x3,y3=plus(P,Q,a,p)
    assert y3*y3%p==(x3*x3*x3+2*x3+2)%p
    #True
    print(x3,y3)
    #6 3
大致就这样，需要注意的是有限域除法均为逆元，不要真的做除法。

**椭圆曲线构建离散对数问题：**

> 曲线上所有的点和$O$一起构成了循环子群，在某些条件下，椭圆曲线上所有点可以形成一个循环群，所以群的本原元一定存在，根据定理，循环群的每个元素都是本原元。

 - 点的阶：对于曲线上一点$P$,存在的最小的正整数$n$满足$nP=O$,则称$n$为$P$的阶，如果不存在则称$P$为无限阶的，通俗的说群的阶就是群里元素的个数。
可以举一个例子:曲线$y^2\equiv x^3+2x+2\mod{17}$,寻找点$P(5,1)$作为本原元找到群上所有点：
    from gmpy2 import *

    def plus(P,Q,a,p):
        if P!=Q:
            s=(P[1]-Q[1])*invert(P[0]-Q[0],p) %p
        else:
            s=(3*P[0]*P[0]+a)*invert(2*P[1],p) %p
            
        x3=(s*s-P[0]-Q[0] )%p
        y3=(s*(P[0]-x3)-P[1])%p
        
        return (x3,y3)
    a=2
    p=17
    P=Q=(5,1)
    for i in range(30):
        P=plus(P,Q,a,p)
        print(P)
    """
    (mpz(6), mpz(3))(mpz(10), mpz(6))(mpz(3), mpz(1))(mpz(9), mpz(16))(mpz(16), mpz(13))(mpz(0), mpz(6))(mpz(13), mpz(7))(mpz(7), mpz(6))(mpz(7), mpz(11))(mpz(13), mpz(10))(mpz(0), mpz(11))(mpz(16), mpz(4))(mpz(9), mpz(1))(mpz(3), mpz(16))
    (mpz(10), mpz(11))(mpz(6), mpz(14))(mpz(5), mpz(16))
    Traceback (most recent call last):
      File "D:/460.py", line 17, in <module>
        P=plus(P,Q,a,p)
      File "D:/460.py", line 5, in plus
        s=(P[1]-Q[1])*invert(P[0]-Q[0],p) %p
    ZeroDivisionError: invert() no inverse exists
    """
可以发现对点$P$进行累加，最后输出的点为$18P(5,16)$,如果再加的话，$s$分母则为$0$，根据定义：即为无穷点$O$,所以该循环群结构就很清晰了，$19P=O$,$20P=O+P=P....$,所以这个群的阶就为$19$，也就是说曲线上有$19$个点。额外的可以得到$18P+P=O$,也就是说$18P(5,16)$是$P(5,1)$的逆元，同样也很好验证：$5=5,-1\equiv 16\mod{17}$,符合定义。

在例子中，群的规模较小，可以通过穷举得到所有的点，实际中确切知道曲线上的点个数是一项非常困难的问题。

> $Hasse's$定理:给定一个椭圆曲线$E$模$p$，曲线上的点的个数表示为$\#E$，那么可以得到一个大致范围：$$p+1-2\sqrt p \le \#E \le p+1+2\sqrt p$$

由此可以引入椭圆曲线上的离散对数问题$(ECDLP)$

> 给定一个曲线$E$,考虑本原元$P$和另一个元素$T$,该问题就是要找到整数$d,(1\le d \le \#E)$,满足$$dP=T$$

同一般的离散对数问题，计算$dP=T$是容易的，而计算$d$满足$dp=T$是困难的，这就是椭圆曲线上的离散对数。
然后来了解几个简单的密码体制：

**$Diffie-Hellman$密钥交换**：
首先确定一条椭圆曲线，大素数$p$，椭圆曲线上一个点$P(x,y)$
$step1:$,$Alice,Bob$分别选择一个$a,b$ $$a,b,\in\{2,3,...,\#E-1\}$$ $step2:$,$Alice,Bob$分别计算$$A=aP=(x_A,y_A),B=bP=(x_B,y_B)$$ $step3:$,$Alice,Bob$交换$A,B$ 
$step4:$,$Alice,Bob$分别计算$$T_{AB}=aB,T_{AB}=bA$$ 那么$Alice,Bob$联合密钥就为$$T_{AB}=(x_{AB},y_{AB})$$和传统的$DH$密钥交换完全相同。

**$ElGamal$密码体制**：
首先了解如何将明文消息嵌入到椭圆曲线：设明文消息$m(0\le m \le M)$,$k$是一个足够大的整数，使得明文消息嵌入到椭圆曲线，错误概率$2^{-k}$,实际中$k\in (30-50)$,比如$k=30$,对明文消息$m$，计算以下一系列$x:$,$$x=\{mk+j,j=0,1,2..\}=\{30m,30m+1,30m+2,...\}$$ 直到$x^3+ax+b\mod{p}$是平方根，即得到椭圆曲线上的点$(x,\sqrt {x^3+ax+b})$,由此$m$嵌入曲线的点为$P(x,y)$。
反之若要从$P(x,y)$得到$m$，只需$\lfloor \frac{x}{30} \rfloor$。
举个例子：设曲线为$y^2=x^3+3x$,$p=4177$,$m=2174$，求$m$嵌入到曲线上的点$P$
    from gmpy2 import *

    def Plaintext_embedding(m,p,k,a,b):
        for j in range(0,p):
            x=m*k+j
            c=x*x*x+a*x+b
            M=iroot(c%p,2)
            if M[1]:
                return (x,M[0])
    k=30
    m=2174
    p=4177
    a=3
    b=0
    x,y=Plaintext_embedding(m,p,k,a,b)
    print(x,y)
    #65235 38
    print(x//k==m)
    #True
然后进入正题：

 - 密钥产生：选取一条椭圆曲线$E_p(a,b)$,明文消息嵌入到曲线上$P_m$,取曲线上一个基点$G$,$G,E_p(a,b)$公开,加密方$Alice$选择私钥$n$,计算$P=nG$,$P$为公钥。
 - 加密过程：对于$P_m$,选择随机$k$，计算$C=(kG,p_m+kP)=(x,y)$
 - 解密过程：只需要计算$y-nx=kP+p_m-knG=p_m$
所以关键在于解出$n$,也就是已知$P,G$,求解$P=nG$，这个椭圆曲线上的离散对数。

**conclusion：**
第一篇就在这儿结束吧，主要了解了一些椭圆曲线的基本知识，离散对数是个难解的问题，但是有些情况是可以求解的，后续文章学习并实现一下吧。


  [1]: /usr/uploads/2021/05/570479859.png
> 分组密码的基本设计思想，包括混淆和扩散，这也是所有线代分组密码的重要属性，$AES,DES$就是两个典型的例子。

首先介绍$DES:$,加密过程大致可以分为四步吧：

 - 明文初始置换
 - 密钥编排$($密钥编排也是个迭代过程$)$
 - 迭代过程$($使用了$Feistel$网络，包括线性运算异或$)$。
 - 逆初始置换
初始置换和逆初始置换很简单，这里主要展开说明一下密钥编排，$f$函数，以及$Feistel$网络
**$Feistel$网络：**
![2021-05-01T10:44:00.png][1]
$Feistel$网络是一类对称密码结构而不是密码算法，取决于轮函数$f$,优点在于：加解密操作非常相似，只需要逆转一下密钥编排，非常利于硬件实现，且不需要轮函数$f$可逆。
比如将明文拆成两半$(L_0,R_0)$,轮密钥为$(k_0,k_1,..k_n)$
加密就是:$L_{i+1}=R_i,R_{i+1}=L_i\oplus f(k_i,R_i)$，对于$i=0,..,n$,得到密文$(L_{n+1},R_{n+1})$
解密就是:$R_i=L_{i+1},L_i=R_{i+1}\oplus f(L_{i+1},k_{i})$,对于$i=0,..,n$,得到明文$(L_0,R_0)$
从这儿就可以看出为什么解密需要逆转一下密钥编排了。

**密钥编排**：
![2021-05-01T10:15:24.png][2]

> 需要注意的是$DES$输入密钥通常为$64$位，其中每第$8$个位都作为前面$7$位的奇校验码，这$8$个奇校验码都不是真正的密钥，也没有增强密码安全性，所以可以说$DES$实际密钥长度为$56$

输入密钥经$PC1$置换，再分为两半分别循环移位，在本轮再通过$PC2$置换得到本轮的子密钥，进入下一轮继续迭代依次类推，很简单哈，每轮的位移数有固定的表。

**轮函数$f$**：
![2021-05-01T10:27:54.png][3]
可以看到本轮未加密的$R_i$进入$f$函数，经过扩展置换$E$成$48$位，与本轮密钥异或，再进入$8$个$s$盒。
> $s$盒是$DES$的核心，也是该算法中唯一的非线性元素，并提供了混淆

输入$6$位进入$s$盒，输出$4$位，$DES$其它置换是直接根据表置换位置，$s$盒运算略有不同，如：
若$s$盒子$1$的输入为$110111$，第一位与最后一位构成$11$，十进制值为$3$，则对应第$3$行，中间$4$位为$1011$对应的十进制值为$11$，则对应第$11$列。查找$s$盒$1$表的值为$14$，则$s$盒$1$的输出为$1110$。
最后$8$个$s$盒输入$32$位进入$p$盒进行依次置换输出，与本轮待加密明文异或得到密文。

最终$DES$每轮的结构可以用下图清晰的表示：
![2021-05-01T10:43:06.png][4]
    def xor(a,b):
        return "".join([str(int(a)^int(b)) for a,b in zip(a,b)])
        
    IP=[57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3, 61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7, 56, 48, 40, 32, 24, 16, 8, 0, 58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4, 62, 54, 46, 38, 30, 22, 14, 6]
    def Initial_permutation(messge):
        return "".join([message[i] for i in IP])
     
    I_P=[39, 7, 47, 15, 55, 23, 63, 31, 38, 6, 46, 14, 54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61, 29, 36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27, 34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25, 32, 0, 40, 8, 48, 16, 56, 24]
    def Inverse_initial_permutation(message):
        return "".join([message[i] for i in I_P])
     
    PC1=[56, 48, 40, 32, 24, 16, 8, 0, 57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 60, 52, 44, 36, 28, 20, 12, 4, 27, 19, 11, 3]
    PC2=[13, 16, 10, 23, 0, 4, 2, 27, 14, 5, 20, 9, 22, 18, 11, 3, 25, 7, 15, 6, 26, 19, 12, 1, 40, 51, 30, 36, 46, 54, 29, 39, 50, 44, 32, 47, 43, 48, 38, 55, 33, 52, 45, 41, 49, 35, 28, 31]
    key_shift=[1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1]
    def Generate_key(key):
        key="".join([key[i] for i in PC1])
        keyresults=[]
        for rounds in range(16):
            C,D=key[:28],key[28:]
            key=C[key_shift[rounds]:]+C[:key_shift[rounds]]+D[key_shift[rounds]:]+D[:key_shift[rounds]]
            keyresults.append("".join([key[i] for i in PC2]))
        return keyresults
     
    E=[31, 0, 1, 2, 3, 4, 3, 4, 5, 6, 7, 8, 7, 8, 9, 10, 11, 12, 11, 12, 13, 14, 15, 16, 15, 16, 17, 18, 19, 20, 19, 20, 21, 22, 23, 24, 23, 24, 25, 26, 27, 28, 27, 28, 29, 30, 31, 0]
     
    S=[[[14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7],[0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8],[4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0],[15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13]],
      [[15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10],[3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5],[0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15],[13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9,]],
      [[10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8],[13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1],[13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7],[1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12]],
      [[7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15],[13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9],[10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4],[3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14]],
      [[2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9],[14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6],[4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14],[11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,]],
      [[12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11],[10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8],[9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6],[4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13]],
      [[4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1],[13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6],[1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2],[6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12]],
      [[13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7],[1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2],[7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8],[2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11]]]
    P=[15, 6, 19, 20, 28, 11, 27, 16, 0, 14, 22, 25, 4, 17, 30, 0, 1, 7, 23, 13, 31, 26, 2, 8, 18, 12, 29, 5, 21, 10, 3, 24]
    def S_box(message):
        section=[message[i:i+6] for i in range(0,len(message),6)] 
        return "".join([bin(S[i][int(section[i][0]+section[i][-1],2)][int(section[i][1:-1],2)])[2:].zfill(4) for i in range(len(section))])
     
    def Function_f(R,key):
        R="".join([R[i] for i in E])
        result=S_box(xor(R,key))
        return "".join([result[i] for i in P])

    def Feistel_structure(message,key):
        L,R=message[:32],message[32:]
        temp=R
        R=xor(L,Function_f(R,key))
        L=temp
        return L+R
        
    def main(message,key):
        message=Initial_permutation(message)
        keys=Generate_key(key)
        for kkk in keys:
            message=Feistel_structure(message,kkk)
        cipher=Inverse_initial_permutation(message)
        return cipher
     
    message="0110001101101111011011010111000001110101011101000110010101110010"
    key="0001001100110100010101110111100110011011101111001101111111110001"
    cipher=main(message,key)
    print(cipher)


加密结果好像不对，艹，每个部件都检查了，不知道哪儿错了。

  [1]: /usr/uploads/2021/05/3212401433.png
  [2]: /usr/uploads/2021/05/1878931417.png
  [3]: /usr/uploads/2021/05/725589181.png
  [4]: /usr/uploads/2021/05/1922131079.png
1.[NCTF2019]Reverse
![2021-04-28T15:39:56.png][1]
题目的意思就是已知一个des子密钥,要求求出所有子密钥。
一篇介绍des的好文[http://www.cxyxiaowu.com/1478.html][2]
![2021-04-28T15:42:29.png][3]
如图所示再清楚不过了，首先逆一下$PC2$盒，因为置换选择去除了$8$位，只需要爆破$2^8$种可能即可，然后右循环移位就可以还原经过$PC1$置换选择后的密钥，然后再照着正常密钥迭代过程，就可以得到$16$轮所有的密钥，解密即可。
    import copy
    import pyDes

    key='********'
    d=pyDes.des(key)

    key10=[0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1]
    PC1=[56, 48, 40, 32, 24, 16, 8, 0, 57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 60, 52, 44, 36, 28, 20, 12, 4, 27, 19, 11, 3]
    PC2=[13, 16, 10, 23, 0, 4, 2, 27, 14, 5, 20, 9, 22, 18, 11, 3, 25, 7, 15, 6, 26, 19, 12, 1, 40, 51, 30, 36, 46, 54, 29, 39, 50, 44, 32, 47, 43, 48, 38, 55, 33, 52, 45, 41, 49, 35, 28, 31]
    movnum = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1]

    #逆PC2
    def re_PC2():
        prekey=['*']*56
        for i in range(len(PC2)):
            prekey[PC2[i]]=key10[i]
        results=[]
        for i in range(2**8):
            temp=bin(i)[2:].zfill(8)
            #key=prekey??????
            key=copy.deepcopy(prekey)
            flag=0
            for each in range(len(key)):
                if key[each]=="*":
                    key[each]=eval(temp[flag])
                    flag+=1
            results.append(key)
        return results

    #求到PC1置换选择后的密钥
    def get_original_key(key,turns):
        C=key[:28]
        D=key[28:]
        movesteps=sum(movnum[:turns])
        
        key1=C[-movesteps:]+C[:-movesteps]
        key2=D[-movesteps:]+D[:-movesteps]
        return key1+key2

    #求到16轮所有的子密钥
    def get_Subkey(key):
        C=key[:28]
        D=key[28:]
        results=[]
        for i in range(len(movnum)):
            C=C[movnum[i]:]+C[:movnum[i]]
            D=D[movnum[i]:]+D[:movnum[i]]
            prekey=C+D
            newkey=[]
            for each in range(len(PC2)):
                newkey.append(prekey[PC2[each]])
            results.append(newkey)
        return results

    def main():
        flag_enc=open(r"D:\删我啊\cipher","rb").read()
        for each in re_PC2():
            key=get_original_key(each,11)
            temp=get_Subkey(key)
            d.Kn=temp
            try:
                flag=d.decrypt(flag_enc)
                if b"NCTF" in flag:
                    print(flag)
                    break
            except:
                pass
    main()
    #NCTF{1t_7urn3d_0u7_7h47_u_2_g00d_@_r3v3rs3_1snt}
后面有时间顺便实现一下des算法，这里已经解决了密钥迭代的问题。

2.[watevrCTF 2019]Baby RLWE
![2021-04-29T07:43:24.png][4]
RLWE全称：Ring learning with errors，维基介绍：
![2021-04-29T07:47:30.png][5]
首先看多项式$e$的产生：
![2021-04-29T07:52:47.png][6]
也符合维基的介绍，是一些小多项式，可以发现很多项系数小于2，也有很多项系数就是0
也就是说，对于统计规律：$b=a*s+e$,因为$e$的某些项为0，每一组总有几项符合$b=a*s$,那么对于很多这样的组，由这个统计规律，就可以认为，产生的$b$种系数出现次数最多的就是$a*s$的系数组成$b$,最终$s=b/a$.
    def read_B():
        global n=104
        B=[]
        with open(r"public_keys.txt","rb") as f:
            for i in f.readlines():
                b=[]
                xi=i.decode()[3:].split("+ ")
                for each in xi:
                    b.append(int(each.split("*")[0].strip()))
                B.append(b)
        return B

    def get_most(B):
        most=[]
        for i in range(n):
            counter=[]
            xi=[]
            for each in B:
                if each[i] not in xi:
                    xi.append(each[i])
                    counter.append(1)
                else:
                    counter[xi.index(each[i])]+=1
            max=counter[0]
            for each in counter:
                if each>max:
                    max=each
            most.append(xi[counter.index(max)])
        return most
                    

    def get_b()
        B=read_B()
        result=get_most(B)

        R.<x> = PolynomialRing(ZZ)
        b=0

        for i in range(len(result)-1,-1,-1):
            b=b+result[n-i-1]*x^i
        return b
    def get_flag():
        q = 40961
        F = GF(q)
        n=104
        R.<y> = PolynomialRing(F)
        S.<x> = R.quotient(y^n + 1)

        b=322*x^103 + 17956*x^102 + 39178*x^101 + 25534*x^100 + 32260*x^99 + 20706*x^98 + 10213*x^97 + 40431*x^96 + 1842*x^95 + 14861*x^94 + 541*x^93 + 35690*x^92 + 33522*x^91 + 38735*x^90 + 25534*x^89 + 37769*x^88 + 11055*x^87 + 40385*x^86 + 28038*x^85 + 37811*x^84 + 35386*x^83 + 18118*x^82 + 28715*x^81 + 14871*x^80 + 20632*x^79 + 28801*x^78 + 35299*x^77 + 21778*x^76 + 21813*x^75 + 16062*x^74 + 24753*x^73 + 35374*x^72 + 36126*x^71 + 38725*x^70 + 11568*x^69 + 15913*x^68 + 12991*x^67 + 32461*x^66 + 38329*x^65 + 22540*x^64 + 10838*x^63 + 32819*x^62 + 7206*x^61 + 22269*x^60 + 21743*x^59 + 7806*x^58 + 32775*x^57 + 40445*x^56 + 19155*x^55 + 18427*x^54 + 19608*x^53 + 36029*x^52 + 13622*x^51 + 39322*x^50 + 17621*x^49 + 24708*x^48 + 22903*x^47 + 27117*x^46 + 37133*x^45 + 18973*x^44 + 26880*x^43 + 23950*x^42 + 16447*x^41 + 36442*x^40 + 6856*x^39 + 1680*x^38 + 27571*x^37 + 28044*x^36 + 2877*x^35 + 30476*x^34 + 7551*x^33 + 25307*x^32 + 17484*x^31 + 36982*x^30 + 38417*x^29 + 1511*x^28 + 6596*x^27 + 33938*x^26 + 19389*x^25 + 17449*x^24 + 14626*x^23 + 13167*x^22 + 19809*x^21 + 39442*x^20 + 7591*x^19 + 39716*x^18 + 40921*x^17 + 3055*x^16 + 505*x^15 + 2289*x^14 + 2804*x^13 + 20692*x^12 + 32414*x^11 + 21987*x^10 + 14613*x^9 + 14804*x^8 + 13994*x^7 + 17381*x^6 + 27850*x^5 + 4901*x^4 + 3532*x^3 + 37067*x^2 + 23165*x + 19377
        a=22868*x^103 + 12008*x^102 + 15201*x^101 + 29439*x^100 + 18864*x^99 + 25003*x^98 + 34633*x^97 + 14528*x^96 + 27817*x^95 + 24738*x^94 + 13052*x^93 + 13777*x^92 + 10191*x^91 + 4185*x^90 + 9193*x^89 + 28408*x^88 + 11353*x^87 + 10185*x^86 + 2994*x^85 + 25268*x^84 + 19453*x^83 + 22736*x^82 + 9552*x^81 + 5453*x^80 + 21377*x^79 + 2646*x^78 + 31215*x^77 + 38909*x^76 + 16807*x^75 + 29207*x^74 + 2466*x^73 + 36604*x^72 + 2362*x^71 + 5815*x^70 + 1891*x^69 + 9602*x^68 + 30777*x^67 + 27629*x^66 + 25098*x^65 + 18057*x^64 + 35574*x^63 + 29797*x^62 + 23069*x^61 + 14033*x^60 + 16577*x^59 + 342*x^58 + 31832*x^57 + 15421*x^56 + 1955*x^55 + 1753*x^54 + 21475*x^53 + 8182*x^52 + 4557*x^51 + 25842*x^50 + 1904*x^49 + 38368*x^48 + 38887*x^47 + 33348*x^46 + 31732*x^45 + 8561*x^44 + 20442*x^43 + 40701*x^42 + 26916*x^41 + 4058*x^40 + 38670*x^39 + 2568*x^38 + 29369*x^37 + 7319*x^36 + 19712*x^35 + 9969*x^34 + 30272*x^33 + 35393*x^32 + 14446*x^31 + 2611*x^30 + 22798*x^29 + 14205*x^28 + 826*x^27 + 24955*x^26 + 32721*x^25 + 21489*x^24 + 10923*x^23 + 19764*x^22 + 34451*x^21 + 31180*x^20 + 31838*x^19 + 26598*x^18 + 39324*x^17 + 31082*x^16 + 3415*x^15 + 34029*x^14 + 35484*x^13 + 20903*x^12 + 23801*x^11 + 17730*x^10 + 33390*x^9 + 12778*x^8 + 25712*x^7 + 17405*x^6 + 14066*x^5 + 12582*x^4 + 37621*x^3 + 9026*x^2 + 16435*x + 32307
        flag=""
        for i in b/a:
            flag+=chr(i)
        print(flag)

    get_flag()        
    #watevr{rlwe_and_statistics_are_very_trivial_when_you_reuse_same_private_keys#02849jedjdjdj202ie9395u6ky}

3.蓝帽杯初赛[classic]
![2021-04-30T09:23:21.png][7]
乍一看仿射密码，再一看维吉尼亚密码，实际上都不是，要解决这个题，首先我们来学习如何破解维吉尼亚密码。发现一个$cryptowiki$[http://cryptowikis.com/][8],对古典密码的分析挺详细的。
回顾一下维吉尼亚密码：
$plain=(m_0,m_1,...,m_n),cipher=(c_0,c_1,...,c_n),key=(k_0,k_1,...k_j),j\le n$
加密就是$c_i=m_i+k_{(i\mod {j})}\mod {26}$
解密就是$m_i=c_i-k_{(i\mod {j})}\mod {26}$
首先引入一个重合指数的概念：

> 重合指数是衡量频率分布和均匀分布相似程度的度量。频率分析是经典密码分析里的重要工具，如果我们分别使用替换密码和维吉尼亚密码加密一段文本，我们可以发现维吉尼亚的频率分布更加平坦，而替换密码的频率分布更加“粗糙”。而重合指数正是将频率分布这种直观的视觉转换为数字表达式。

数学定义：$IC=\frac{\sum\limits_{i=A}^{i=Z}f_i(f_i-1)}{N(N-1)}$,其中$f_i$代表$i$字母的个数，$N$是字母总个数。
维基的解释：
![2021-04-29T13:28:42.png][9]
第一步：我们可以根据重合指数来实现估计密钥的长度,具体实现是爆破$key$的长度$l$,将密文分成$l$组，分别计算每组的重合指数，然后求个平均数，如果满足大约在0.06-0.07的范围，此时密钥长度大概率就是$l$。再简单说一下如何分组：

> 重合指数又称重合概率，是指从一段密文种随机抽取两个字母，这两个字母相同的概率,已知一个完全随机的英文文本重合指数约为：0.0385；而有意义的英文文本重合指数CI约为0.065。

这样就更好理解了吧，维吉尼亚密码密钥循环使用，那么对应相同密钥位加密的密文，才应该满足重合概率约为0.065，举个例子：
密文:$abcdefgh$：

 - l=1,分组:$abcdefgh$
 - l=2,分组:$aceg,bdfh$
 - l=3,分组:$adg,beh,cf$

第二步：已知密钥长度，采用拟重合指数来找到密钥，

> 根据对大量的英文文本的统计，可以得到各字母出现的频率，用以分析破译密码，维吉尼亚密码用来拟合重合指数，从而确定密钥内容

首先引入拟重合指数：在一个含有$n=26$种字母的文本中，$p_i$代表字母$i$在密文中分布概率，$q_i$代表在正常明文中字母$i$分布的概率，定义重合指数：$X=\sum\limits_{i=1}^{n} p_iq_i$,当两个频率分布类似时，$X$的值相对要高。
显然位移量只有0-26，利用第一步中的密钥长度将密文分段，可以分布计算该位移量下的拟重合指数，取最大的拟重合指数对应位移量为密钥，完成拟合，确定密钥。
    #去除非字母
    def check(i):
        if ord(i)>=97 and ord(i)<=122:
            return True
        else:
            return False
        
    #计算重合指数
    def Index_of_Coincidence(string):
        IC = 0
        alpha = {'a':0,'b':0,'c':0,'d':0,'e':0,'f':0,'g':0,'h':0,'i':0,'j':0,'k':0,'l':0,'m':0,'n':0,'o':0,'p':0,'q':0,'r':0,'s':0,'t':0,'u':0,'v':0,'w':0,'x':0,'y':0,'z':0}
               
        N = len(string)
        N = float(N*(N-1))
        
        for i in string:
            alpha[i] += 1
        for i in alpha:
            i = alpha[i]
            IC += i*(i-1)
        IC = IC/N
        return IC
     
    #得到密钥长度
    def guess_len_key(Ciphertext):
        text=""
        for i in Ciphertext:
            if check(i):
                text+=i
        l = 1
        while True:
            sum_index = 0.0
            for i in range(l):
                sum_index+=Index_of_Coincidence(text[i::l])
                
            sum_index = sum_index/l
            if sum_index >= 0.06 and sum_index <= 0.07:
                break
            else:
                l += 1
        return l

    #拟重合指数，确定密钥
    def keyword(Ciphertext,keylength):
        ListCiphertext = []
        for i in Ciphertext:
            if check(i):
                ListCiphertext.append(i)
                
        Standard = {'a':0.08167,'b':0.01492,'c':0.02782,'d':0.04253,'e':0.12702,'f':0.02228,'g':0.02015,'h':0.06094,'i':0.06966,'j':0.00153,'k':0.00772,'l':0.04025,'m':0.02406,'n':0.06749,'o':0.07507,'p':0.01929,'q':0.00095,'r':0.05987,'s':0.06327,'t':0.09056,'u':0.02758,'v':0.00978,'w':0.02360,'x':0.00150,'y':0.01974,'z':0.00074}
        while True:
            KeyResult = ""
            for i in range(keylength):
                PresentCipherList = ListCiphertext[i::keylength]
                QuCoincidenceMax = 0
                
                for m in range(26):
                    QuCoincidencePresent = 0
                    for Letter in set(PresentCipherList):
                        LetterFrequency = PresentCipherList.count(Letter) / len(PresentCipherList)
                        k = chr( ( ord(Letter) - 97 - m ) % 26 + 97 )
                        StandardFrequency = Standard[k]
                        #拟重合指数
                        QuCoincidencePresent = QuCoincidencePresent + LetterFrequency * StandardFrequency
                        
                    if QuCoincidencePresent > QuCoincidenceMax:
                        #取最大的拟重合指数对应位移为密钥
                        QuCoincidenceMax = QuCoincidencePresent
                        KeyLetter = chr( m + 97)

                KeyResult+=KeyLetter
            break
        return KeyResult

    #解密
    def decrypt(Ciphertext,key):
        message=""
        flag=0
        for i in Ciphertext:
            if  check(i):
                message+=chr((ord(i)-ord(key[flag%len(key)]))%26+97)
                flag+=1
            else:
                message+=i
                
        return message
    #默认全为小写字母            
    Ciphertext =open(r'D:\桌面\flag_encode.txt','rb').read().decode().lower()
    key=keyword(Ciphertext,guess_len_key(Ciphertext))
    print(decrypt(Ciphertext,key))
这样就完成了对维吉尼亚密码的唯密文攻击；然后我们再来看这个题：
$plain=(m_0,m_1,...,m_n),cipher=(c_0,c_1,...,c_n)$
$key1=(k_0,k_1,...k_i),i\le n,key2=(e_0,e_1,...,e_j),j\le n$
加密就是$c_x=k_{(x\mod{i})}m_x+e_{(x\mod {j})}\mod {26}$
解密就是$m_x={k_{(x\mod{i})}}^{-1}(c_x-e_{(x\mod {j})})\mod {26}$
第一步：还是同维吉尼亚密码一样，首先根据指数重合确定密钥长度$($显然得到的是两组密钥长度的最小公倍数$)$
第二步：确定密钥，还是拟重合指数，不过需要同时计算$k_i,e_i$，然后还是取最大的重合指数对应的增量$e$和乘数$k$作为密钥，由此确定密钥$key1,key2$，显然若两组密钥长度不同时，会得到密钥的循环节，但是没有关系，直接用这个解密就行，在确定$k,e$时，得保证$k$在模$26$下存在逆，最终代码如下：
    #计算重合指数
    def Index_of_Coincidence(string):
        IC = 0
        alpha = {'a':0,'b':0,'c':0,'d':0,'e':0,'f':0,'g':0,'h':0,'i':0,'j':0,'k':0,'l':0,'m':0,'n':0,'o':0,'p':0,'q':0,'r':0,'s':0,'t':0,'u':0,'v':0,'w':0,'x':0,'y':0,'z':0}
               
        N = len(string)
        N = float(N*(N-1))
        
        for i in string:
            alpha[i] += 1
        for i in alpha:
            i = alpha[i]
            IC += i*(i-1)
        IC = IC/N
        return IC
     
    #得到密钥长度
    def guess_len_key(text):
        l = 1
        while True:
            sum_index = 0.0
            for i in range(l):
                sum_index+=Index_of_Coincidence(text[i::l])
                
            sum_index = sum_index/l
            if sum_index >= 0.06 and sum_index <= 0.07:
                break
            else:
                l += 1
        return l

    from gmpy2 import *
    #拟重合指数，确定密钥
    def keyword(Ciphertext,keylength):
        ListCiphertext = list(Ciphertext)
        Standard = {'a':0.08167,'b':0.01492,'c':0.02782,'d':0.04253,'e':0.12702,'f':0.02228,'g':0.02015,'h':0.06094,'i':0.06966,'j':0.00153,'k':0.00772,'l':0.04025,'m':0.02406,'n':0.06749,'o':0.07507,'p':0.01929,'q':0.00095,'r':0.05987,'s':0.06327,'t':0.09056,'u':0.02758,'v':0.00978,'w':0.02360,'x':0.00150,'y':0.01974,'z':0.00074}
        while True:
            key1=[]
            key2=[]
            for i in range(keylength):
                PresentCipherList = ListCiphertext[i::keylength]
                QuCoincidenceMax = 0
                #分别爆破m,n
                for m in range(26):
                    if gcd(m,26)==1:
                        for n in range(26):
                            QuCoincidencePresent = 0
                            for Letter in set(PresentCipherList):
                                LetterFrequency = PresentCipherList.count(Letter) / len(PresentCipherList)
                                k = chr(invert(m,26)*(ord(Letter)-n)%26 +97)
                                StandardFrequency = Standard[k]
                                #拟重合指数
                                QuCoincidencePresent = QuCoincidencePresent + LetterFrequency * StandardFrequency
                                
                            if QuCoincidencePresent > QuCoincidenceMax:
                                #取最大的拟重合指数对应位移为密钥
                                QuCoincidenceMax = QuCoincidencePresent
                                k1=m
                                k2=n
                key1.append(k1)
                key2.append(k2)
                                   
            break
        return key1,key2

    #解密
    def decrypt(Ciphertext,key1,key2,length):
        message=""
        flag=0
        for i in Ciphertext:
            if  check(i):
                message+=chr(invert(key1[flag%length],26)*(ord(i)-key2[flag%length])%26+97)
                flag+=1
            else:
                message+=i
        return message

    #默认全为小写字母            
    Ciphertext =open(r'D:\桌面\ciph.txt','rb').read().decode().lower()
    length=guess_len_key(Ciphertext)
    key1,key2=keyword(Ciphertext,length)
    print(key1)
    #[23, 25, 21, 3, 19, 23, 25, 21, 3, 19, 23, 25, 21, 3, 19, 23, 25, 21, 3, 19, 23, 25, 21, 3, 19, 23, 25, 21, 3, 19, 23, 25, 21, 3, 19, 23, 25, 21, 3, 19, 23, 25, 21, 3, 19, 23, 25, 21, 3, 19, 23, 25, 21, 3, 19]
    print(key2)
    #[2, 14, 2, 3, 9, 22, 15, 6, 7, 14, 8, 2, 14, 2, 3, 9, 22, 15, 6, 7, 14, 8, 2, 14, 2, 3, 9, 22, 15, 6, 7, 14, 8, 2, 14, 2, 3, 9, 22, 15, 6, 7, 14, 8, 2, 14, 2, 3, 9, 22, 15, 6, 7, 14, 8]
    #将结果输出
    f=open(r"flag.txt","w")
    f.write(decrypt(Ciphertext,key1,key2,length))
最后得到密钥再解个$AES$，哎；
    from Crypto.Cipher import AES
    import base64

    key="frequencyisoeasy"
    aes = AES.new(key.encode(), AES.MODE_CBC, b'\0' * 16)
    cipher=b'XpOY4zBvK6h//jAgIraYzBBK1lXz9pw7DxXGt6XoODZrSUCpjFzgw5pCo3ffclKM'

    print(aes.decrypt(base64.b64decode(cipher)))
    #flag{7f96d10e-b3da-4c26-a1e6-d3522f3740fc}
4.[BSidesSF2019]slashslash
![2021-04-30T10:51:29.png][10]
下载附件得到一个加密文件和一个类似密钥的字符串，显然要用$openssl$解,看了wp后是挺显然的
使用命令：$openssl -d -aes-128-cbc -pass pass： -in cipher.txt 
但是直接解会报错，然后得知需要加一个参数-md md5,-md 指定的是密钥生成得摘要算法，默认sha1；对openssl一些命令的介绍说明：[https://wiki.openssl.org/index.php/Enc][11]
![2021-04-30T10:57:38.png][12]
得到flag：CTF{always_add_comments}

5.某比赛题RSA
![2021-04-30T15:37:55.png][13]
首先是一个三素数RSA,由素数的最小公倍数,一个公钥产生一个私钥，然后加密了一个数字，给了数字及加密后的数字，以及e,d的高位，显然要求e,d。显然是离散对数问题，这里只有低44位未知，采用大步小步算法。
$$c\equiv m^{d_0+x} \mod{N},m\equiv c^{e_0+y}\mod{N}$$ $$\Rightarrow m^x\equiv c{(m^{d_0})}^{-1}\mod{N},c^y\equiv m{(c^{e_0})}^{-1}\mod{N}$$
其中x,y,均在$2^{44}$以内，取$D=2^{22}$,$x=kD+i$,算出所有$k$再算$i$中间相遇求到$x,y$
然后就是已知$e,d,n$,这里是三素数，在两素数时，可以直接利用$e,d,n$就可以分解$n$。
$$ed-1=k(n-(p+q)-1)$$ $$\Rightarrow \frac{ed-1}{n}=k\frac{n}{n}-\frac{p+q-1}{n}$$ $$\Rightarrow k=((ed-1)//n)+1$$
然后求到欧拉函数与$n=pq$联立就可以分解$n$。其实对于三素数也成立：推导过程类似。
但这里是用素数最小公倍数产生的$ed-1=klcm(p-1,q-1,r-1)$,最小公倍数和欧拉函数之间只差了个倍数，一般较小，就可以通过爆破这个倍数然后得到欧拉函数，但是三个未知数，不一定能分解n，这个题直接用欧拉函数处理后续问题。
然后再用公钥7加密了$flag$,可以发现欧拉函数和e不互素，显然7是其中一个因子欧拉函数的因子，这里可以将这个因子剔除再解密，假设$7|p-1$,可以求到$p$：
$$2^{\frac{(p-1)(q-1)(r-1)}{7}}\mod{qr}=1,2^{\frac{(p-1)(q-1)(r-1)}{7}}\mod{n}=s$$ $$\Rightarrow gcd(s-1,n)=qr$$
看起来很神奇哈，用群论的知识来说的话：$7|p-1$，所以$\frac{(p-1)(q-1)(r-1)}{7}$不是该模$p(n)$乘法群的周期，但是$\frac{(p-1)(q-1)(r-1)}{7}$是模$qr$乘法群的周期，所以会得到该乘法群零元1,所以结果减1与$n$有公因子$qr$,其实不太懂。
直接推导：记$\frac{(p-1)*(q-1)*(r-1)}{7}=I$
$$2^I\mod{n}=s,2^I\mod{qr}=1$$ $$\Rightarrow 2^I=s+nk_1,2^I=1+k_2qr$$ $$\Rightarrow gcd(s-1,n)=qr$$
这样似乎更清晰，但是不太容易想到这样构造吧。剔除$p$，用模数$qr$求解是等价的，这个显然证明从略。
    from gmpy2 import *
    from Crypto.Util.number import *

    def BSGS(g,h,n,bound):
        D = iroot(bound,2)[0]
        G = pow(g,D,n)
        dic = {h*invert(pow(G, k, n),n)%n: k for k in range(D)}
        for i in range(D):
            if pow(g,i,n) in dic:
                print("over")
                x=dic[pow(g,i,n)]*D+i
                break
        return x
        
    def boom_phi(e,d,n):
        y=e*d-1
        for lam in range(1,150):
            k=lam*y//n+1
            if y%k==0:
                print(lam)
                return lam*y//k
            
    n = 0x81647fb077e9b66b6a86b700f5bed99e5139dfe7484c28a5b7a27767e53266d971a19410554a127ae034440bf2f3b902e649470cdd44524cfcd2634e55d4defd7b83497d4135a05030a548730454edc18efc7a4bbd470f8bd273dbbd8a1382f7
    m = 0x861011b0af95e654458f84c57d638405319ea154501df412bba722c6768c0ff9
    c = 0x6ab0554ae8513a7cdfb96ba7fc2fbc5d8ab3f872746cfbf8f06660e78f402b7c3662ef896a1cde1aa9abc2a09a3590d3619941fb8621ea51d27803ff932ec43a5005f244497a4d3b254296d1c4699a4e7e8fc0e1cadd0a192905075d66a8187a
    ek = 0xe00000000000
    dk = 0x1211655116c24db65ea6553aecdabc06842fc485b8c89aa08e9a974d997b0842ddd142dd6712b40adff9442a4c340567568578ebdd509fb3483532f9d1e4f78d13a9a0e447935ed58bbf262bbc799c40227bcd5a5bc312531a8800000000000
    h1 = pow(m,-dk,n)*c%n
    h2 = pow(c,-ek,n)*m%n

    d=BSGS(m,h1,n,2**44)+dk
    e=BSGS(c,h2,n,2**44)+ek

    pow(m,d,n)==pow(c,e,n)
    n=0x81647fb077e9b66b6a86b700f5bed99e5139dfe7484c28a5b7a27767e53266d971a19410554a127ae034440bf2f3b902e649470cdd44524cfcd2634e55d4defd7b83497d4135a05030a548730454edc18efc7a4bbd470f8bd273dbbd8a1382f7

    n_phi=boom_phi(e,d,n)
    s=pow(2,n_phi//7,n)
    qr=gcd(s-1,n)
    p=n//qr
    qr_phi=n_phi//(p-1)
    c=0x3773fd7f928a0231c0a26e48678984fc36db84f4d63de0cdb36a3101e6e48e140a21b6a6fae834dfaa2670d36444a5f002d28a5d4a9efb6822af43d4d98f4aa9a18139b76527049d2c4419d7ad4ddd9ef65ec7176842aa9ced2f8b14af7bf731
    e=7
    d=invert(e,qr_phi)
    print(long_to_bytes(pow(c,d,qr)))
    #flag{618b6744a7e82e58b4a510dbb43174fac42c2cdc}

  [1]: /usr/uploads/2021/04/277241014.png
  [2]: http://www.cxyxiaowu.com/1478.html
  [3]: /usr/uploads/2021/04/1982599939.png
  [4]: /usr/uploads/2021/04/2400826488.png
  [5]: /usr/uploads/2021/04/3569149372.png
  [6]: /usr/uploads/2021/04/1756389778.png
  [7]: /usr/uploads/2021/04/2273087347.png
  [8]: http://cryptowikis.com/
  [9]: /usr/uploads/2021/04/1210367010.png
  [10]: /usr/uploads/2021/04/650239132.png
  [11]: https://wiki.openssl.org/index.php/Enc
  [12]: /usr/uploads/2021/04/2975709795.png
  [13]: /usr/uploads/2021/04/365002981.png
